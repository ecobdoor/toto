<!DOCTYPE html>
<html>

<head>
	<meta charset="UTF-8">
	<title>ESP32 OTA</title>
	<meta name='viewport' content='width=device-width, initial-scale=1' />
	<!--
	<script src="jquery-3.4.1.min.js"></script>
-->

</head>

<<body onload="OTA_reset()">

	<h2>ESP32 Firmware Update Page</h2>
	<h4 id="latest_firmware"></h4>

	<input type="file" id="selectedProgFile" accept=".bin" style="display: none;" onchange="OTA_chooseBin()" />
	<input type="button" value="Browse app..." onclick="document.getElementById('selectedProgFile').click();" />
	<h3 id="prog_info"></h3>
	<input type='submit' id="update_button" value='Update Firmware' onclick="OTA_updateFirmware()">

	<input type="file" id="selectedDataFile" style="display: none;" onchange="OTA_chooseFile()" />
	<input type="button" value="Browse file..." onclick="document.getElementById('selectedDataFile').click();" />
	<h3 id="data_info"></h3>
	<input type='submit' id="upload_button" value='Upload File' onclick="OTA_uploadFile()">

	<h4 id="ota_status"></h4>
	<h4 id="status1"></h4>
	<table class="fixed" border="1">
		<col width="500px" />
		<col width="1000px" />
		<tr>
			<td>
				<h2>ESP32 File Server</h2>
			</td>
			<td>
				<table border="1">
					<tr>
						<td> <label for="newfile">Upload a file</label> </td>
						<td colspan="2"> <input id="newfile" type="file" onchange="setpath()" style="width:100%;"> </td>
					</tr>
					<tr>
						<td> <label for="filepath">Set path on server</label> </td>
						<td> <input id="filepath" type="text" style="width:100%;"> </td>
						<td> <button id="upload" type="button" onclick="upload()">Upload</button> </td>
					</tr>
				</table>
			</td>
		</tr>
		<tr>
			<td> <button id="dirList_button" type="button" onclick="OTA_dirList()">dir SPIFS</button> </td>
			<td>
				<div id="dirList">Server Files</div>
			</td>
		</tr>
	</table>

	<script type="text/javascript">
		function setpath() {
			var default_path = document.getElementById("newfile").files[0].name;
			document.getElementById("filepath").value = default_path;
		}
		function upload() {
			var filePath = document.getElementById("filepath").value;
			var upload_path = "/ota_upload/" + filePath;
			var fileInput = document.getElementById("newfile").files;

			/* Max size of an individual file. Make sure this
			 * value is same as that set in file_server.c */
			var MAX_FILE_SIZE = 200 * 1024;
			var MAX_FILE_SIZE_STR = "200KB";

			if (fileInput.length == 0) {
				alert("No file selected!");
			} else if (filePath.length == 0) {
				alert("File path on server is not set!");
			} else if (filePath.indexOf(' ') >= 0) {
				alert("File path on server cannot have spaces!");
			} else if (filePath[filePath.length - 1] == '/') {
				alert("File name not specified after path!");
			} else if (fileInput[0].size > 200 * 1024) {
				alert("File size must be less than 200KB!");
			} else {
				document.getElementById("newfile").disabled = true;
				document.getElementById("filepath").disabled = true;
				document.getElementById("upload").disabled = true;

				var file = fileInput[0];
				var xhttp = new XMLHttpRequest();
				xhttp.onreadystatechange = function () {
					if (xhttp.readyState == 4) {
						if (xhttp.status == 200) {
							document.open();
							document.write(xhttp.responseText);
							document.close();
						} else if (xhttp.status == 0) {
							alert("Server closed the connection abruptly!");
							location.reload()
						} else {
							alert(xhttp.status + " Error: " + xhttp.responseText);
							location.reload()
						}
					}
				};
				xhttp.open("POST", upload_path, true);
				xhttp.send(file);
			}
		}
		function OTA_dirList() {
			// read files directory
			fetch(document.location.origin+`/ota_dirSPI`)
				.then(function (response) {
					return response.json()
				})
				.then(function (state) {
					document.getElementById("dirList").innerHTML = state.dir;
				})
		}
		function OTA_chooseFile() {
			var x = document.getElementById("selectedDataFile");
			var file = x.files[0];
			document.getElementById("data_info").innerHTML = "<h4>File: " + file.name + "<br>" + "Size: " + file.size + " bytes</h4>";
		}

		function OTA_uploadFile() {
			// Form Data
			var formData = new FormData();

			var fileSelect = document.getElementById("selectedDataFile");

			if (fileSelect.files && fileSelect.files.length == 1) {
				var file = fileSelect.files[0];
				console.log("file to upload ='" + file.name + "'");
				formData.set("file", file, file.name);

				// Http Request
				var xhr = new XMLHttpRequest();

				//Upload progress
				xhr.upload.addEventListener("progress", function (evt) {
					if (evt.lengthComputable) {
						var percentComplete = (evt.loaded / evt.total) * 100;
						var x = Math.floor(percentComplete);
						//Do something with upload progress as console.log(x);

						document.getElementById("ota_status").innerHTML = "Progress:" + x + "%.";

						// After we send it all, lets ask the board if it went well. 
						if (x == 100) {
							// Lets ask the board for the upload result 
							OTA_getstatus();
						}

					} else {
						window.alert('total size is unknown')
					}
				}, false);

				xhr.open('POST', "/ota_upload");
				xhr.responseType = "blob";
				xhr.send(formData);
			} else {
				window.alert('Select A File First')
			}
		}
		///////////////////////////////////////////////////////////////
		var OTA_seconds = 10;
		var OTA_theTimer;

		function OTA_chooseBin() {
			var x = document.getElementById("selectedProgFile");
			var file = x.files[0];
			document.getElementById("prog_info").innerHTML = "<h4>File: " + file.name + "<br>" + "Size: " + file.size + " bytes</h4>";
		}

		function OTA_updateFirmware() {
			// Form Data
			var formData = new FormData();

			var fileSelect = document.getElementById("selectedProgFile");

			if (fileSelect.files && fileSelect.files.length == 1) {
				var file = fileSelect.files[0];
				formData.set("file", file, file.name);

				// Http Request
				var xhr = new XMLHttpRequest();

				//Upload progress
				xhr.upload.addEventListener("progress", function (evt) {
					if (evt.lengthComputable) {
						var percentComplete = (evt.loaded / evt.total) * 100;
						var x = Math.floor(percentComplete);
						//Do something with upload progress as console.log(x);

						document.getElementById("ota_status").innerHTML = "Progress:" + x + "%.";

						// After we send it all, lets ask the board if it went well. 
						if (x == 100) {
							// Lets ask the board for the upload result 
							OTA_getstatus();
						}

					} else {
						window.alert('total size is unknown')
					}
				}, false);

				xhr.open('POST', "/ota_update");
				xhr.responseType = "blob";
				xhr.send(formData);
			} else {
				window.alert('Select A File First')
			}
		}

		function OTA_getstatus() {

			var xhr = new XMLHttpRequest();
			var requestURL = "/ota_status";
			xhr.open('POST', requestURL, true);

			//Send the proper header information along with the request
			xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");

			xhr.onreadystatechange = function () { // Call a function when the state changes.
				if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
					var response = JSON.parse(xhr.responseText);

					document.getElementById("latest_firmware").innerHTML = "Latest Firmware:  " + response.compile_date + " - " + response.compile_time
					// If flashing was complete it will return a 1, else -1
					// A return of 0 is just for information on the Latest Firmware request
					if (response.status == 1) {
						// Start the countdown timer
						console.log("Status Request Returned ok");

						// Set the delay time in seconds 
						OTA_seconds = 10;

						// Start the countdown timer
						console.log("starting the timer");

						// Since ESP32 reported ok, lets set a tier to reload this web page 
						// Lets give it 10 seconds to reboot and re-connect to the router. 
						OTA_theTimer = setInterval(function () {
							OTA_startMyTimer();
						}, 1000);

					} else if (response.status == -1) {
						document.getElementById("ota_status").innerHTML = "!!! Update Error !!!";
					}
				}
			}
			console.log("Requesting Upgrade Status");
			xhr.send('status');
		}

		function OTA_startMyTimer() {
			console.log("timer" + OTA_seconds);

			if (--OTA_seconds == 0) {
				clearInterval(OTA_theTimer);
				//				window.open("/", "_self");

				//				location.reload();
			} else {
				document.getElementById("ota_status").innerHTML = "Upgrade Complete, Rebooting in " + OTA_seconds + " Seconds.";
			}
		}
		function OTA_reset() {
			OTA_getstatus();
			OTA_dirList();
		}
	</script>
	</body>

</html>