#include "esp_camera.h"
#include "esp_camera.h"
#include "Arduino.h"
#pragma once
///////////////////////////////////////////////////////////////////////
/**
 * @brief struct  RGB888_t is based on an array of 3 uint8_t. So pointer++ runs !!!
 *
 * Cf. http://www.yolinux.com/TUTORIALS/Endian-Byte-Order.html
 *
 * ESP32 is little endian.
 *
 * 32 bits number 0xHhHlLhLl -> memory order is Ll:Lh:Hl:HH (ie 133124 0x00020804 -> 04:08:02:00)
 *
 * So for RGB888_t, last byte in memory (uint32_t)... is ignored (HH=0) by _32to34
 *
 *
 *
 *
 * In frame buffer bytes order is  [Blue, Green, Red, Next]...
 * uint32_t is Next Red Green Blue
 */
//---------------------------------------------------------------------
/**
 * @brief printf a binary rrrrr:ggg|ggg:bbbbb RBG565 16 bits pixel
 */
#define B888_PAT "{%c%c%c%c-%c%c%c%c:%c%c%c%c-%c%c%c%c:%c%c%c%c-%c%c%c%c}"
/**
 * @brief printf a hexadecimal <= FF:FF:FF max RBG888 24 bits pixel
 */
#define H888_PAT "[%02X:%02X:%02X]"

///////////////////////////////////////////////////////////////////////
inline uint32_t _24to32(const uint8_t pix[3]){
	return (uint32_t)(pix[2]) << 16 | (uint16_t)(pix[1]) << 8 | pix[0];
}
inline void _32to24(const uint32_t val, uint8_t *pix){
	*pix++ = val & 0xFF;
	*pix++ = (val >> 8) & 0xFF;
	*pix = (val >> 16) & 0xFF;
}
inline void _plus888(const uint8_t *val, uint8_t *pix){
	int16_t x = *pix + *val++;
	if (255 < x)
		*pix++ = 255;
	else
		*pix++ = x;
	x = *pix + *val++;
	if (255 < x)
		*pix++ = 255;
	else
		*pix++ = x;
	x = *pix + *val;
	if (255 < x)
		*pix = 255;
	else
		*pix = x;
}
inline void _minus888(const uint8_t *val, uint8_t *pix){
	int16_t x = *pix - *val++;
	if (x < 0)
		*pix++ = 0;
	else
		*pix++ = x;
	x = *pix - *val++;
	if (x < 0)
		*pix++ = 0;
	else
		*pix++ = x;
	x = *pix - *val;
	if (x < 0)
		*pix = 0;
	else
		*pix = x;
}
inline void _prod888(const uint8_t val, uint8_t *pxl){
	uint16_t x = *pxl * val;
	if (255 < x)
		*pxl++ = 255;
	else
		*pxl++ = x;
	x = *pxl * val;
	if (255 < x)
		*pxl++ = 255;
	else
		*pxl++ = x;
	x = *pxl * val;
	if (255 < x)
		*pxl = 255;
	else
		*pxl = x;
}
inline void _div888(const uint8_t val, uint8_t *pix){
	*pix++ /= val;
	*pix++ /= val;
	*pix /= val;
}
inline void _and(const uint8_t *val, uint8_t *pix){
	*pix++ &= *val++;
	*pix++ &= *val++;
	*pix &= *val;
}
inline void _or(const uint8_t *val, uint8_t *pix){
	*pix++ |= *val++;
	*pix++ |= *val++;
	*pix |= *val;
}
inline void _xor(const uint8_t *val, uint8_t *pix){
	*pix++ ^= *val++;
	*pix++ ^= *val++;
	*pix ^= *val;
}
/*
 inline void _not( uint8_t *pix){*pix++ =~*pix; *pix++ =~*pix; *pix =~*pix;}
 inline void _plus888(const uint8_t *val, uint8_t *pix){
 int16_t x=*pix;	x+=*val++ ;	if(255<x)*pix++=255; else *pix++=x;
 x=*pix;	x+=*val++ ;	if(255<x)*pix++=255; else *pix++=x;
 x=*pix;	x+=*val ;	if(255<x)*pix=255; else *pix=x;}
 inline void _minus888(const uint8_t *val, uint8_t *pix){
 int16_t x=*pix;	x-=*val++ ;	if(x<0)*pix++=0; else *pix++=x;
 x=*pix;	x-=*val++ ;	if(x<0)*pix++=0; else *pix++=x;
 x=*pix;	x-=*val ;	if(x<0)*pix=0; else *pix=x;}

 */
///////////////////////////////////////////////////////////////////////
// @formatter:off
struct  RGB888_t {
	uint8_t pix[3];
	String dump(const char *COMMENT=nullptr, const uint8_t *BUFFER = nullptr, const uint8_t BUFLEN = 8)const{
		uint16_t cnt=0;
		char buffer[256];
		cnt+=sprintf(&buffer[cnt],"%s",COMMENT?COMMENT:"");
		cnt+=sprintf(&buffer[cnt]," 888:h_%02x%02x%02x ║%3i║ "H888_PAT""B888_PAT"",
			pix[2],pix[1],pix[0],norm(),pix[2],pix[1],pix[0],BIN8(pix[2]),BIN8(pix[1]),BIN8(pix[0]));
		cnt+=sprintf(&buffer[cnt],"%s",BUFFER?(buf_Info(BUFFER, BUFLEN).c_str()):"");
		return String(buffer);
	}
	inline uint32_t bin()   const {return _24to32(pix);}
	inline uint8_t red()   const {return pix[2];}
	inline uint8_t green() const {return pix[1];}
	inline uint8_t blue()  const {return pix[0];}
	inline RGB888_t gray()  const {uint8_t n=norm();uint8_t pxl[3];pxl[0]=n;pxl[1]=n;pxl[2]=n;return RGB888_t(_24to32(pxl));}
	inline uint8_t  norm()  const {return pix[0]/3 + pix[1]/3 + pix[2]/3;}
	inline void     sum(uint32_t & SUM) const {SUM+=norm();}
	RGB888_t() {}
	inline RGB888_t(const RGB888_t& a) {pix[0]=a.pix[0];pix[1]=a.pix[1];pix[2]=a.pix[2];}
	inline RGB888_t(const uint32_t& a) {_32to24(a,pix);}		// this case uint32_t is to directly set a color 0x00RrGgBb
	inline RGB888_t(const uint8_t& r,const uint8_t& g,const uint8_t& b) {pix[2]=r;pix[1]=g;pix[0]=b;}
	inline RGB888_t(const int& r,const int& g,const int& b) {pix[2]=r;pix[1]=g;pix[0]=b;}
	inline operator uint32_t() { return _24to32(pix); } 		//forbidden to avoid uint32_t(RGB888_t) or *(uint32_t*)&buffer[...] = RGB888_t(...)
	inline operator uint32_t() const { return _24to32(pix); }	//forbidden to avoid uint32_t(RGB888_t) or *(uint32_t*)&buffer[...] = RGB888_t(...)
/*
	inline RGB888_t operator++() {++val; val&=0x00FFFFFF; return *this;}
	inline RGB888_t operator--() {--val; val&=0x00FFFFFF; return *this;}
	inline RGB888_t operator++(int) {RGB888_t temp(val); ++val; val&=0x00FFFFFF; return temp;}
	inline RGB888_t operator--(int) {RGB888_t temp(val); --val; val&=0x00FFFFFF; return temp;}
	inline RGB888_t operator&(const RGB888_t& a) {return RGB888_t(val&a.val);}
	inline RGB888_t& operator=(const RGB888_t& a) { val=a.val; return *this; }
	inline RGB888_t& operator+=(const RGB888_t& a) { val+=a.val; val&=0x00FFFFFF; return *this; }
	inline RGB888_t& operator-=(const RGB888_t& a) { val-=a.val; val&=0x00FFFFFF; return *this; }
*/
	inline bool operator==( const RGB888_t& right ) const {return (pix[0]==right.pix[0])&&(pix[1]==right.pix[1])&&(pix[2]==right.pix[2]);}
	inline bool operator!=( const RGB888_t& right ) const {return (pix[0]!=right.pix[0])||(pix[1]!=right.pix[1])||(pix[2]!=right.pix[2]);}
	inline bool operator >( const RGB888_t& right ) const {return norm()>right.norm();}
	inline bool operator <( const RGB888_t& right ) const {return norm()<right.norm();}
	inline const RGB888_t operator+( const RGB888_t &other ) const {RGB888_t tmp(*this);_plus888(other.pix,tmp.pix); return tmp;}
	inline const RGB888_t operator-( const RGB888_t &other ) const {RGB888_t tmp(*this);_minus888(other.pix,tmp.pix); return tmp;}
	inline const RGB888_t operator*( const uint8_t &fact ) const {RGB888_t tmp(*this);_prod888(fact,tmp.pix); return tmp; }
	inline const RGB888_t operator/( const uint8_t &fact ) const {RGB888_t tmp(*this);_div888(fact,tmp.pix); return tmp; }
	inline RGB888_t operator~ () {uint8_t * pxl=&pix[0]; *pxl++ =~*pxl; *pxl++ =~*pxl; *pxl =~*pxl;return *this;}
	inline RGB888_t operator& (const RGB888_t &other) {RGB888_t tmp(*this);_and(other.pix,tmp.pix); return tmp;}
	inline RGB888_t operator| (const RGB888_t &other) {RGB888_t tmp(*this); _or(other.pix,tmp.pix); return tmp;}
	inline RGB888_t operator^ (const RGB888_t &other) {RGB888_t tmp(*this);_xor(other.pix,tmp.pix); return tmp;}
	inline RGB888_t operator&=(const RGB888_t &other) {_and(other.pix,pix); return *this;}
	inline RGB888_t operator|=(const RGB888_t &other) { _or(other.pix,pix); return *this;}
	inline RGB888_t operator^=(const RGB888_t &other) {_xor(other.pix,pix); return *this;}
/*
*/
//	inline RGB888_t& operator=(const uint32_t& a) { _32to24(a,pix); return *this; }
/*
	inline RGB888_t& operator+=(const uint32_t& a) { val+=a; val&=0x00FFFFFF; return *this; }
	inline RGB888_t& operator-=(const uint32_t& a) { val-=a; val&=0x00FFFFFF; return *this; }
*/
	inline bool operator==( const uint32_t& right ) const {return _24to32(pix)==(right&0x00FFFFFF);}
	inline bool operator!=( const uint32_t& right ) const {return _24to32(pix)!=(right&0x00FFFFFF);}
	inline bool operator >( const uint32_t& right ) const {return norm()>((right>>16)&0xFF)+((right>>8)&0xFF)+(right&0xFF);}
	inline bool operator <( const uint32_t& right ) const {return norm()<((right>>16)&0xFF)+((right>>8)&0xFF)+(right&0xFF);}
/*
	inline const RGB888_t operator+( const uint32_t &other ) const { return RGB888_t(val+other); }
	inline const RGB888_t operator-( const uint32_t &other ) const { return RGB888_t(val-other); }
	inline const RGB888_t operator/( const uint32_t &other ) const { return RGB888_t(val/other); }
	inline const RGB888_t operator*( const uint32_t &other ) const { return RGB888_t(val*other); }
*/
};
// @formatter:on
//---------------------------------------------------------------------
/**
 * Non-members function for left operators
 */
inline RGB888_t operator*(const uint8_t &left, const RGB888_t &other){
	RGB888_t tmp = other;
	_prod888(left, tmp.pix);
	return tmp;
}
inline RGB888_t operator/(const uint8_t &left, const RGB888_t &other){
	RGB888_t tmp = other;
	_div888(0, tmp.pix);
	return tmp;
}
//inline uint32_t(const RGB888_t& a){return 0;}
///////////////////////////////////////////////////////////////////////
