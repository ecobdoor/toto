#include "CAM_MOTION.h"
#include <FS.h>
#include <SPIFFS.h>
#include "CAM_GFONT.h"
#include "CAM_ESPINFO.h"
#include "EloquentVision.h" 
#include "CAM_VISION.h"
c_motion motion;
///////////////////////////////////////////////////////////////////////
using namespace Eloquent::Vision;
#define wBlock DEF_MOV_FWIDTH / DEF_MOV_BLOKSIZE
#define hBlock DEF_MOV_FHEIGHT / DEF_MOV_BLOKSIZE
camera_fb_t *frame;
uint8_t downscaled[hBlock][wBlock];
Camera::RGB565Decoder<DEF_MOV_PIXFORMAT, DEF_MOV_FWIDTH, DEF_MOV_FHEIGHT> decoder;
MotionDetection<DEF_MOV_PIXFORMAT, wBlock, hBlock, DEF_MOV_BLOKSIZE> movement(DEF_MOV_SMOOTH,
DEF_MOV_THRESHOLD);
//
#define DEF_DBG
// @formatter:off
#ifdef DEF_DBG
#define timeit(label, code) \
	do { \
		uint64_t start=micro_TS(); \
		code; \
		float duration = (micro_TS() - start)/1000.0; \
		Serial.printf("\nDuration=%10.3f ms for %s.",(micro_TS()-start)/1000.0, label); \
	}while(0)
#endif
#ifndef DEF_DBG
	#define timeit(label, code) \
	do { \
		code; \
	}while(0)
#endif
// @formatter:on

///////////////////////////////////////////////////////////////////////
//---------------------------------------------------------------------
bool motionDetect(camera_fb_t *FRAME, const char *COMMENT){
	Serial.printf("\n(%u/%u) ----------------------- %s", motion.cnterror, motion.cntloop, COMMENT);
	Serial.printf("\n%s", frame_Infos(FRAME, "#### MOTION input ").c_str());
	motion.cntloop++;
	if (channels(FRAME) < 1) {
		motion.cnterror++;
		return false;
	}
	switch(FRAME->format){
		case PIXFORMAT_RGB565: {
			Vision<RGB565_t> vision(FRAME->width, FRAME->height);
			timeit("Decode", vision.Decode(FRAME->buf, (uint8_t*)downscaled, DEF_MOV_BLOKSIZE));
			break;
		}
		case PIXFORMAT_GRAYSCALE: {
			Vision<MONO8_t> vision(FRAME->width, FRAME->height);
			timeit("Decode", vision.Decode(FRAME->buf, (uint8_t*)downscaled, DEF_MOV_BLOKSIZE));
			break;
		}
		case PIXFORMAT_RGB888:
			{
			Vision<RGB888_t> vision(FRAME->width, FRAME->height);
			timeit("Decode", vision.Decode(FRAME->buf, (uint8_t*)downscaled, DEF_MOV_BLOKSIZE));
			break;
		}
		default: {
			return false;
		}
	}
#ifdef DEF_DBG
	Serial.printf("(%ix%i)^%i=>(%ix%i), grid size(%i)",
	DEF_MOV_FWIDTH, DEF_MOV_FHEIGHT, channels(FRAME), wBlock, hBlock, DEF_MOV_BLOKSIZE);
#endif

	timeit("Update", movement.update(downscaled));

	timeit("Detect", movement.detect(FRAME->buf, FRAME->width, channels(FRAME)));
#ifdef DEF_DBG
	gTerminal txt(FRAME);
	txt.setTo(5, 5, 0, 0, 0);
	txt.gprintf("%i changes %6.2f%%", movement.changes(), movement.ratio());
	Serial.printf(" Smooth(%10.3f), Threshold(%10.3f) %s ", DEF_MOV_SMOOTH,
	DEF_MOV_THRESHOLD,
		(DEF_MOV_THRESHOLD < 1) ? "relative" : "absolute");
#endif

	Serial.printf("\n%i changes (%6.2f%%)", movement.changes(), 100 * movement.ratio());
	Serial.printf("\n%s", frame_Infos(FRAME, "#### MOTION output").c_str());
	if (DEF_MOV_THRESHOLD < 1)
		return (DEF_MOV_THRESHOLD < movement.ratio());
	else
		return (DEF_MOV_THRESHOLD < movement.changes());
}
/*
 Serial.printf("\n(%u/%u) ----------------------- %s",motion.cnterror,motion.cntloop, COMMENT);
 Serial.printf("\n%s",frame_Infos(FRAME, "#### MOTION input ").c_str());
 motion.cntloop++;
 if (channels(FRAME) < 1) {
 motion.cnterror++;
 return false;
 }
 timeit("Decode", decod<FRAME->format>=Decode(FRAME, (uint8_t*)downscaled, DEF_MOV_BLOKSIZE));
 timeit("Decode", decoder.decode_999(FRAME->buf, (uint8_t*)downscaled, DEF_MOV_BLOKSIZE));
 #ifdef DEF_DBG
 Serial.printf("(%ix%i)^%i=>(%ix%i), grid size(%i)",
 DEF_MOV_FWIDTH, DEF_MOV_FHEIGHT, channels(FRAME), wBlock, hBlock, DEF_MOV_BLOKSIZE);
 #endif

 timeit("Update", movement.update(downscaled));

 timeit("Detect", movement.detect(FRAME->buf, FRAME->width, channels(FRAME)));
 #ifdef DEF_DBG
 gTerminal txt(FRAME);
 txt.setTo(5, 5, 0, 0, 0);
 txt.gprintf("%i changes %6.2f%%", movement.changes(), movement.ratio());
 Serial.printf(" Smooth(%10.3f), Threshold(%10.3f) %s ", DEF_MOV_SMOOTH, DEF_MOV_THRESHOLD,
 (DEF_MOV_THRESHOLD < 1) ? "relative" : "absolute");
 #endif

 Serial.printf("\n%i changes (%6.2f%%)", movement.changes(), 100 * movement.ratio());
 Serial.printf("\n%s", frame_Infos(FRAME, "#### MOTION output").c_str());
 if (DEF_MOV_THRESHOLD < 1)
 return (DEF_MOV_THRESHOLD < movement.ratio());
 else
 return (DEF_MOV_THRESHOLD < movement.changes());
 }
 */
///////////////////////////////////////////////////////////////////////
